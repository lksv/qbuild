#!/bin/bash

# build SRC_DIR BUILD_TASK BRANCH

#TODO:
# * check input params
# * remove docker images even on error

set -eo pipefail
set -x

SOURCE_DIR="$1"
APP="$2"          # build_task / job_name
BRANCH="$3"

export QBUILD_ROOT=${QBUILD_ROOT:="/var/tmp/qbuild"}
mkdir -p $QBUILD_ROOT

export CACHE_DIR="$QBUILD_ROOT/$APP/cache"
[[ -d $CACHE_DIR ]] || mkdir -p $CACHE_DIR

if [[ ! -f $APP ]]; then
  echo "QBuild file '$APP' is missing"
  exit 1
fi

DOCKER_IMAGE=$(ruby -e "require 'yaml';puts YAML.load_file('$APP')['image'] || 'lksv/qbuild-node'")

uid=`id -u`
gid=`id -g`
script="groupadd --gid $gid ubuntu && useradd --uid $uid --gid $gid --create-home --shell /bin/dash ubuntu; sudo -u ubuntu -H sh -c "


echo "----> Building  $APP (dockeer: $DOCKER_IMAGE)"

# Run the builder script and attach to view output
ID=$(docker run -d -v $SOURCE_DIR:/app -v $CACHE_DIR:/cache -w /app $DOCKER_IMAGE sh -c "$script \"/build/builder $APP\"")
docker attach $ID
test $(docker wait $ID) -eq 0
docker rm $ID


MATCH_BRANCH=$(ruby -e "require 'yaml';puts (YAML.load_file('$APP')['deploy'] || {})['branch']")
DEPLOY_PORT=$(ruby -e "require 'yaml';puts (YAML.load_file('$APP')['deploy'] || {})['port']")

if [ -n "$DEPLOY_PORT" -a "$BRANCH" = "$MATCH_BRANCH" ]; then
  echo "-----> Deploying $APP on port $DEPLOY_PORT"

  if [[ -f "$QBUILD_ROOT/$APP/CONTAINER" ]]; then
    oldid=$(< "$QBUILD_ROOT/$APP/CONTAINER")
  fi

  # kill the old container
  if [[ -n "$oldid" ]]; then
    # Let the old container finish processing requests, before terminating it
    WAIT="${QBUILD_WAIT_TO_RETIRE:-10}"
    echo "-----> Shutting down old container in $WAIT seconds"
    (
      exec >/dev/null 2>/dev/null </dev/null
      trap '' INT HUP
      sleep $WAIT
      docker kill $oldid
      docker rm $oldid
    ) & disown -a
    # Use trap since disown/nohup don't seem to keep child alive
    # Give child process just enough time to set the traps
    sleep 0.1
    sleep $WAIT
    sleep 5
  fi

  ID=$(docker run -d -p $DEPLOY_PORT -v $SOURCE_DIR:/app -v $CACHE_DIR:/cache -w /app $DOCKER_IMAGE sh -c "$script \"/build/deployer $APP\"")
  #docker attach $ID
  echo $ID > "$QBUILD_ROOT/$APP/CONTAINER"

fi
